//PIC18F4520 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = INTIO67    // Oscillator Selection bits (Internal oscillator block, port function on RA6 and RA7)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = ON        // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 3         // Brown Out Reset Voltage bits (Minimum setting)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTBE  // CCP2 MUX bit (CCP2 input/output is multiplexed with RB3)
#pragma config PBADEN = OFF     // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = OFF      // MCLR Pin Enable bit (RE3 input pin enabled; MCLR disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = ON         // Code Protection bit (Block 0 (000800-001FFFh) code-protected)
#pragma config CP1 = ON         // Code Protection bit (Block 1 (002000-003FFFh) code-protected)
#pragma config CP2 = ON         // Code Protection bit (Block 2 (004000-005FFFh) code-protected)
#pragma config CP3 = ON         // Code Protection bit (Block 3 (006000-007FFFh) code-protected)

// CONFIG5H
#pragma config CPB = ON         // Boot Block Code Protection bit (Boot block (000000-0007FFh) code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>    
#define _XTAL_FREQ 4000000
#define EN PORTCbits.RC3
#define RW PORTCbits.RC2
#define RS PORTCbits.RC1

void lcddata(unsigned char);
void lcdcommand(unsigned char);
void lcdstring(unsigned char *str);
void lcdinit(void);

void main(void) 
{
    OSCCON=0xEF;      //Internal oscillator with 4MHz
    TRISC=0x00;       // C Port as Output
    TRISD=0x00;       // D Port as Output 
    RW=0;
    EN=0;
    lcdinit();
    lcdstring("ATHARV AJETRAO");
    lcdcommand(0xC0);
    lcdstring("2305018");
//    lcdcommand(0xC0);
    __delay_ms(2000);
    lcdcommand(0x01);
    while(1)
    {
        lcdcommand(0x80);          //cursor at first row
        lcdstring("RIT COLLEGE");
        lcdcommand(0xC0);          //cursor at second row
        lcdstring("WELCOMES YOU");
        __delay_ms(2000);
    }
    return;
}
    
void lcddata(unsigned char data)
{
    RW=0;         // WRITE Data to LCD
    RS=1;         // DATA
    PORTD=data;
    EN=1;
    __delay_ms(1);
    EN=0;
}
void lcdcommand(unsigned char command)
{
    RS=0;
    PORTD=command;
    EN=1;
    __delay_ms(1);
    EN=0;
}

void lcdstring(unsigned char *S)
{
    while(*S)
    {
        lcddata(*S);
        S++;
    }
}

void lcdinit(void)
{
    lcdcommand(0x01);   //clear display
    __delay_ms(80);
    lcdcommand(0x38);   //8 bit, 2 line, 5x7 dots
    __delay_ms(1);
    lcdcommand(0x06);   //increment cursor
    __delay_ms(1);
    lcdcommand(0x0C);   //display ON, cursor OFF
    __delay_ms(1);
    lcdcommand(0x80);   //cursor at first row
    __delay_ms(1);
}